name: Build Rust Lambda

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-arm64:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache cargo registry & target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-arm64-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-arm64-

      - name: Install cross toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Add ARM64 target
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Ensure cargo knows the cross-linker
        run: |
          mkdir -p .cargo
          echo "[target.aarch64-unknown-linux-gnu]" > .cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml

      - name: Build release (ARM64)
        run: |
          # change `compress` to your binary name
          cargo build --release --target aarch64-unknown-linux-gnu --bin compress

      - name: Package into lambda zip
        run: |
          BINARY=compress
          OUT=out
          rm -rf $OUT && mkdir -p $OUT
          cp target/aarch64-unknown-linux-gnu/release/$BINARY $OUT/bootstrap
          chmod +x $OUT/bootstrap
          cd $OUT && zip ../lambda-arm64.zip bootstrap
    

      - name: Upload built zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-arm64.zip
          path: lambda-arm64.zip
